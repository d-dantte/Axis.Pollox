
2016/09/03 ===========================================================================================================

1.   Remove all "virtual" modifiers from all entity properties in this library! see notes Axis.Europa for more information.
2.	 Go through all implementations and ensure that Validate() is called on all Pollux Entities before they interract with
	 the backend.

3.	 Add a AuditAwarePersistenceCommand implementation of the IPersistenceCommand interface that delegates to the Jupiter
	 implementation. This layer will be responsible for managing the "created by" and "modified by" process for objects
	 being persisted


2017/07/19 #03 ==================================================================================================================

1.	 Changing Axis.Pollux.Identity to now implement "Contacts" with UserData. The reson behind this is phone, email, etc may evolve
	 into new means of communication, or be changed totally. So to avoid changing the model, i will use the UserData
	 [Done]

2.	 Convert all DateTime to DateTimeOffset.

3.	 Implement the UserLogon with DateTimeOffset in mind
	
4.	 Modify the User object:
	 a. UniqueId will no more be a string, but a Guid.
	 b. all "foreign keys" pointing to this object will be modified to reflect the new Guid
	 c. UserId will be changed to UserName. This field should still be indexed at the back end, but it will no longer "EXCLUSIVELY" contain an "email".
	 d. Upon user creation, an email is supplied, as well as a user-name for the targeted user: these values may be identical; the email however, will
	    be stored in the "UserData" store/table along with other "contact data".
5.	Add Identity server implementation to this.
6.	Add Execution Context that functions like the CallContext class. One can drop Key-Value pairs in it for acces by other processes down the execution chain